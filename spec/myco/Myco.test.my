
import 'BasicSpec.my'


BasicSpec {
  name: "Myco"
  
  [tests]
  
  "tuple with no arguments returns an empty tuple": {
    tuple = Myco.tuple
    assert_is_a(tuple, Rubinius::Tuple)
    assert_equal(tuple.size, 0)
  }
  
  "tuple with arguments returns a tuple containing those arguments": {
    tuple = Myco.tuple(:a, :b, :c)
    assert_is_a(tuple, Rubinius::Tuple)
    assert_equal(tuple.size, 3)
    assert_equal(tuple[0], :a)
    assert_equal(tuple[1], :b)
    assert_equal(tuple[2], :c)
  }
  
  "eval returns a value from a Myco declarative expression": {
    obj = Myco.eval("BasicObject { foo: 88 }")
    assert_equal(obj.foo, 88)
  }
  
  "eval can read local variables from the outside scope": {
    foo = 88
    obj = Myco.eval("BasicObject { bar: foo + 11 }")
    assert_equal(obj.bar, 99)
  }
  
  "eval can write local variables from the outside scope": {
    foo = 88
    obj = Myco.eval("BasicObject { bar: foo = 99 }")
    obj.bar
    assert_equal(foo, 99)
  }
}
