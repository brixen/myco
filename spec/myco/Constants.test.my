
import 'BasicSpec.my'
import 'fixtures/libfoo.my'
import(as: :Contained) 'fixtures/libfoo.my'

NinetyNineGenerator < EmptyObject { generate: 99 }

BasicSpec {
  name: "Constants"
  
  Subject < Object { foo:88, bar:99 }
  make_subject: Subject { }
  
  RubySubject: ::Ruby::Class.new {
    __send__(:define_method, :foo){88}
    __send__(:define_method, :bar){99}
  }
  make_ruby_subject: RubySubject.new
  
  [tests]
  
  "reopens a Component by constant name": {
    subject = make_subject
    assert_equal(subject.foo, 88)
    assert_equal(subject.bar, 99)
    assert_equal(subject.?baz, void)
    
    Subject << { foo:0, baz:101 }
    
    assert_equal(subject.foo, 0)
    assert_equal(subject.bar, 99)
    assert_equal(subject.baz, 101)
  }
  
  "reopens a Ruby Class by constant name": {
    subject = make_ruby_subject
    assert_equal(subject.foo, 88)
    assert_equal(subject.bar, 99)
    assert_equal(subject.?baz, void)
    
    RubySubject << { foo:0, baz:101 }
    
    assert_equal(subject.foo, 0)
    assert_equal(subject.bar, 99)
    assert_equal(subject.baz, 101)
  }
  
  "reopens a Component inside of a reopened Component": {
    Subject << { Inner < EmptyObject { } }
    Subject << { Inner << { Core:true } }
    
    assert_equal(Subject::Inner::Core, true)
  }
  
  "reopens a Component inside of a reopened Ruby Class": {
    RubySubject << { Inner < EmptyObject { } }
    RubySubject << { Inner << { Core:true } }
    
    assert_equal(RubySubject::Inner::Core, true)
  }
  
  "accesses a constant imported into the FileToplevel": {
    assert_equal(Foo::EightyEight, 88)
    assert_equal(Contained::Foo::EightyEight, 88)
  }
  
  "allows imports to access its own top level constants": {
    assert_equal((Foo.new).ninety_nine, 99)
    assert_equal((Contained::Foo.new).ninety_nine, 99)
  }
  
  "imports two separate copies of the same library": {
    refute_equal(Foo, Contained::Foo)
  }
}
