
BasicSpec {
  name: "Connectivity"
  
  root_self: self
  helpers_self: helpers.helpers_self
  
  [helpers]
  
  helpers_self: self
  
  var inner: Object { }
  
  var inner_choice: |cond|
    switch(cond)
      .when_true  { Object { } }
      .when_false { Object { } }
      .output
  
  [tests]
  
  "accesses the null category as its parent": {
    assert_equal(parent, root_self)
    assert_is_a(parent.parent, FileToplevel)
  }
  
  "accesses another category by its name": {
    assert_equal(helpers, helpers_self)
    assert_is_a(helpers, Category)
  }
  
  "accesses with parent its containing category if inside one": {
    assert_equal(helpers.inner.parent, helpers)
  }
  
  "accesses with parent_meme its containing meme": {
    assert_equal(helpers.inner.parent_meme, helpers.memes.fetch(:inner))
    
    assert_equal(helpers.inner_choice(true).parent_meme,
                 helpers.memes.fetch(:inner_choice))
    assert_equal(helpers.inner_choice(false).parent_meme,
                 helpers.memes.fetch(:inner_choice))
  }
}
