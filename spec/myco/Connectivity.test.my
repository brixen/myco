
import 'BasicSpec.my'


BasicSpec {
  name: "Connectivity"
  
  main_self: self
  helpers_self: helpers.helpers_self
  
  [helpers]
  
  helpers_self: self
  
  var inner: Object { }
  
  storage inner_choice: |cond|
    switch(cond)
      .when_true  { Object { } }
      .when_false { Object { } }
      .output
  
  [main]
  
  other_main_self: self
  
  [tests]
  
  "accesses the main category as its parent": {
    assert_equal(parent, main_self)
    assert_is_a(parent.parent, FileToplevel)
  }
  
  "accesses the main component with component.main": {
    assert_is_a(component.main, Component)
    assert_equal(component.main, main_self.component)
    assert_equal(main_self.component.main, main_self.component)
  }
  
  "reopens the main category with the [main] category tag": {
    assert_equal(other_main_self, main_self)
  }
  
  "accesses another category by its name": {
    assert_equal(helpers, helpers_self)
    assert_is_a(helpers, Category)
  }
  
  "accesses with parent its containing category if inside one": {
    assert_equal(helpers.inner.parent, helpers)
  }
  
  "accesses with parent_meme its containing meme": {
    assert_equal(helpers.inner.parent_meme, helpers.memes.fetch(:inner))
    
    assert_equal(helpers.inner_choice(true).parent_meme,
                 helpers.memes.fetch(:inner_choice))
    assert_equal(helpers.inner_choice(false).parent_meme,
                 helpers.memes.fetch(:inner_choice))
  }
  
  "accesses locals from the scope containing the object declaration": {
    foo = 88
    obj = Object { bar: foo }
    assert_equal(obj.bar, 88)
    foo = 99
    assert_equal(obj.bar, 99)
  }
}
