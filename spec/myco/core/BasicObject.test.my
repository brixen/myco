
import '../BasicSpec.my'


BasicSpec {
  name: "core/BasicObject"
  
  new_subject: BasicObject { }
  
  [tests]
  
  # TODO: remove deprecated switch
  "switch returns a Switch with its input set": {
    s = new_subject.switch(88)
    assert_is_a(s, Switch)
    assert_equal(s.input, 88)
  }
  
  "loops and can break the loop": {
    a = 0
    loop { a=a+1; if(a>5) { break } }
    assert_equal(a, 6)
  }
  
  "executes a single callable strategy of cond": {
    effects = []
    readable = &|y|{
      cond(
        88 == y, &{ effects.push(y); "eighty-eight" }
        99 == y, &{ effects.push(y); "ninety-nine" }
                 &{ effects.push(y); "unknown" }
      )
    }
    assert_equal(readable.call(88), "eighty-eight"); assert_equal(effects, [88])
    assert_equal(readable.call(99), "ninety-nine");  assert_equal(effects, [88,99])
    assert_equal(readable.call(100), "unknown");     assert_equal(effects, [88,99,100])
  }
  
  "returns a single non-callable strategy of cond": {
    readable = &|y|{
      cond(
        88 == y, "eighty-eight"
        99 == y, "ninety-nine"
                 "unknown"
      )
    }
    assert_equal(readable.call(88), "eighty-eight")
    assert_equal(readable.call(99), "ninety-nine")
    assert_equal(readable.call(100), "unknown")
  }
  
  "executes callable test values of cond until a match is found": {
    effects = []
    readable = &|y|{
      cond(
        &{effects.push(1); 88 == y}, &{ "eighty-eight" }
        &{effects.push(2); 99 == y}, &{ "ninety-nine" }
                                     &{ "unknown" }
      )
    }
    assert_equal(readable.call(88), "eighty-eight"); assert_equal(effects, [1])
    assert_equal(readable.call(99), "ninety-nine");  assert_equal(effects, [1,1,2])
    assert_equal(readable.call(100), "unknown");     assert_equal(effects, [1,1,2,1,2])
  }
  
  "executes a single callable strategy based on case input": {
    effects = []
    readable = &|y|{
      y case(
        88, &|x|{ effects.push(x); "eighty-eight" }
        99, &|x|{ effects.push(x); "ninety-nine" }
            &|x|{ effects.push(x); "unknown" }
      )
    }
    assert_equal(readable.call(88), "eighty-eight"); assert_equal(effects, [88])
    assert_equal(readable.call(99), "ninety-nine");  assert_equal(effects, [88,99])
    assert_equal(readable.call(100), "unknown");     assert_equal(effects, [88,99,100])
  }
  
  "returns a single non-callable strategy based on case input": {
    readable = &|y|{
      y case(
        88, "eighty-eight"
        99, "ninety-nine"
            "unknown"
      )
    }
    assert_equal(readable.call(88), "eighty-eight")
    assert_equal(readable.call(99), "ninety-nine")
    assert_equal(readable.call(100), "unknown")
  }
  
}
