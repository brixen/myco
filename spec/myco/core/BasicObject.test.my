
import '../BasicSpec.my'


BasicSpec {
  name: "core/BasicObject"
  
  new_subject: BasicObject {
    var foo: Object { }
    memoize bar: |x,y,z| x+y-z
  }
  
  TestComponent < BasicObject { var foo }
  
  [tests]
  
  "var decorator allows cached storage of a value": {
    subject = new_subject
    a = subject.foo
    b = subject.foo
    assert_equal(a, b)
  }
  
  "var decorator also declares a writer meme": {
    subject = new_subject
    a = Object { }
    b = subject.foo
    refute_equal(a, b)
    
    subject.foo = a
    b = subject.foo
    assert_equal(a, b)
  }
  
  "switch returns a Switch with its input set": {
    s = new_subject.switch(88)
    assert_is_a(s, Switch)
    assert_equal(s.input, 88)
  }
  
  "loops and can break the loop": {
    a = 0
    loop { a=a+1; if(a>5) { break } }
    assert_equal(a, 6)
  }
  
  # TODO: this is actually a test for Component...
  "can be injected into a Ruby object": {
    
    obj = ::Object.new
    TestComponent.inject_into(obj)
    
    refute(obj.component.equal?(TestComponent))
    assert(obj.component < TestComponent)
    
    obj.foo = 88
    assert_equal(obj.foo, 88)
    obj.foo = 99
    assert_equal(obj.foo, 99)
  }
}
