
BasicSpec {
  name: "core/Switch"
  
  var switch_maker: BasicObject { }
  switch: |v| switch_maker.switch(v)
  
  [tests]
  
  "#when executes a block if it matches": {
    ary = []
    switch(88)
      .when(11) { ary.push(:foo) }
      .when(22) { ary.push(:bar) }
      .when(88) { ary.push(:baz) }
      .when(0)  { ary.push(0) }
    
    assert_equal(ary, [:baz])
  }
  
  "#when will not match more than once": {
    ary = []
    switch(88)
      .when(11) { ary.push(:foo) }
      .when(88) { ary.push(:bar) }
      .when(88) { ary.push(:baz) }
      .when(88) { ary.push(0) }
    
    assert_equal(ary, [:bar])
  }
  
  "#else executes a block if nothing else matched so far": {
    ary = []
    switch(88)
      .when(11) { ary.push(:foo) }
      .when(22) { ary.push(:bar) }
      .else     { ary.push(:baz) }
      .else     { ary.push(0) }
    
    assert_equal(ary, [:baz])
  }
  
  "#output returns the result of the block that was executed": {
    assert_equal(
      switch(88)
        .when(11) { :foo }
        .when(88) { :bar }
        .when(88) { :baz }
        .else     { 0 }
        .output, :bar)
    
    assert_equal(
      switch(88)
        .when(11) { :foo }
        .when(22) { :bar }
        .else     { :baz }
        .else     { 0 }
        .output, :baz)
  }
  
  "#output returns void if no block executed": {
    assert_equal(
      switch(88)
        .when(11) { :foo }
        .when(22) { :bar }
        .when(33) { :baz }
        .output, void)
    
    assert_equal(switch(88).output, void)
  }
  
  "#matched returns true if a block was executed": {
    assert_equal(
      switch(88)
        .when(11) { :foo }
        .when(88) { :bar }
        .when(88) { :baz }
        .else     { 0 }
        .matched, true)
    
    assert_equal(
      switch(88)
        .when(11) { :foo }
        .when(22) { :bar }
        .else     { :baz }
        .else     { 0 }
        .matched, true)
  }
  
  "#matched returns false if no block executed": {
    assert_equal(
      switch(88)
        .when(11) { :foo }
        .when(22) { :bar }
        .when(33) { :baz }
        .matched, false)
    
    assert_equal(switch(88).matched, false)
  }
  
  "when_true executes a block if the input is truthy": {
    assert(switch(true) .when_true{}.matched)
    assert(switch(88)   .when_true{}.matched)
    refute(switch(false).when_true{}.matched)
    refute(switch(null) .when_true{}.matched)
    refute(switch(void) .when_true{}.matched)
  }
  
  "when_false executes a block if the input is falsey": {
    refute(switch(true) .when_false{}.matched)
    refute(switch(88)   .when_false{}.matched)
    assert(switch(false).when_false{}.matched)
    assert(switch(null) .when_false{}.matched)
    assert(switch(void) .when_false{}.matched)
  }
}
