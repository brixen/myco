
import '../BasicSpec.my'


BasicSpec {
  name: "core/Struct"
  
  Subject < Struct {
    field foo
    field bar
    field baz
  }
  
  [tests]
  
  "fields gives all declared fields in order": {
    assert_equal(Subject.fields, [:foo, :bar, :baz])
  }
  
  "cast converts the given tuple into a struct": {
    tuple = Rubinius::Tuple.new(3)
    tuple[0] = :a
    tuple[1] = :b
    tuple[2] = :c
    
    assert_equal(tuple[0], :a)
    assert_equal(tuple[1], :b)
    assert_equal(tuple[2], :c)
    
    result = Subject.cast(tuple)
    assert_equal(tuple.__id__, result.__id__)
    assert_is_a(tuple, Subject)
    
    assert_equal(tuple[0], :a); assert_equal(tuple.foo, :a)
    assert_equal(tuple[1], :b); assert_equal(tuple.bar, :b)
    assert_equal(tuple[2], :c); assert_equal(tuple.baz, :c)
  }
  
  "cast fails for struct of the wrong size": {
    tuple = Rubinius::Tuple.new(10)
    assert_equal(Subject.cast(tuple), null)
  }
}
