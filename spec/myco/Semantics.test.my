
import 'BasicSpec.my'


BasicSpec {
  name: "Semantics"
  
  # Convenience function to return all passed arguments as an array
  unsplat: |*args| args
  # Convenience function to return the passed block
  unblock: |*args, &block| block
  # Convenience function to return all passed arguments including the block
  unsplat_w_block: |*args, &block| args.push(block)
  
  [tests]
  
  TestComponent < Object { var foo, var bar, var baz }
  
  "creates objects using new with optional keyword arguments": {
    obj = TestComponent.new(foo:1, bar:2)
    assert_equal(obj.foo, 1)
    assert_equal(obj.bar, 2)
    assert_equal(obj.baz, null)
  }
  
  "splats arguments in method calls": {
    a = [1,2]; b = [3,4]; c = [5,6]; d = [7,8]; e = [9,0]
    
    assert_equal(unsplat( a, b, c, d, e), [[1,2],[3,4],[5,6],[7,8],[9,0]])
    assert_equal(unsplat( a, b, c, d,*e), [[1,2],[3,4],[5,6],[7,8], 9,0 ])
    assert_equal(unsplat( a, b, c,*d,*e), [[1,2],[3,4],[5,6], 7,8,  9,0 ])
    assert_equal(unsplat(*a, b,*c, d,*e), [ 1,2, [3,4], 5,6, [7,8], 9,0 ])
    assert_equal(unsplat( a,*b, c,*d, e), [[1,2], 3,4, [5,6], 7,8, [9,0]])
    assert_equal(unsplat(*a,*b, c, d, e), [ 1,2,  3,4, [5,6],[7,8],[9,0]])
    assert_equal(unsplat(*a, b, c, d, e), [ 1,2, [3,4],[5,6],[7,8],[9,0]])
    assert_equal(unsplat(*a, b, c, d,*e), [ 1,2, [3,4],[5,6],[7,8], 9,0 ])
  }
  
  "splats arguments in array literals": {
    a = [1,2]; b = [3,4]; c = [5,6]; d = [7,8]; e = [9,0]
    
    assert_equal([ a, b, c, d, e], [[1,2],[3,4],[5,6],[7,8],[9,0]])
    assert_equal([ a, b, c, d,*e], [[1,2],[3,4],[5,6],[7,8], 9,0 ])
    assert_equal([ a, b, c,*d,*e], [[1,2],[3,4],[5,6], 7,8,  9,0 ])
    assert_equal([*a, b,*c, d,*e], [ 1,2, [3,4], 5,6, [7,8], 9,0 ])
    assert_equal([ a,*b, c,*d, e], [[1,2], 3,4, [5,6], 7,8, [9,0]])
    assert_equal([*a,*b, c, d, e], [ 1,2,  3,4, [5,6],[7,8],[9,0]])
    assert_equal([*a, b, c, d, e], [ 1,2, [3,4],[5,6],[7,8],[9,0]])
    assert_equal([*a, b, c, d,*e], [ 1,2, [3,4],[5,6],[7,8], 9,0 ])
  }
  
  "passes a block to a method": {
    a = [1,2]; b = [3,4]; c = Proc.new { }
    
    refute(unblock)
    assert(unblock{})
    assert_equal(unblock(),      null)
    assert_equal(unblock(&null), null)
    assert_equal(unblock(&c),    c)
    assert_equal(unsplat_w_block(a,*b),       [[1,2], 3,4, null])
    assert_equal(unsplat_w_block(a,*b,&null), [[1,2], 3,4, null])
    assert_equal(unsplat_w_block(a,*b,&c),    [[1,2], 3,4, c])
  }
  
  "distributes arguments to the correct parameters in the meme signature": {
    pr = Proc.new {}
    subject = Object {
      example: |a,b,c='C',d='D',*e,f,g:,h:,i:'I',j:'J',**k,&l| [
        a:a,b:b,c:c,d:d,e:e,f:f,g:g,h:h,i:i,j:j,k:k,l:l
      ]
    }
    
    assert_equal(subject.example(
      1,2,3,4,5,6,7,8,9
      g:10,h:11,i:22,j:33,x:44,y:55,z:66
      &pr
    ), [
      a:1,b:2,c:3,d:4,e:[5,6,7,8],f:9
      g:10,h:11,i:22,j:33,k:[x:44,y:55,z:66].last
      l:pr
    ])
    
    assert_equal(subject.example(
      1,2,9
      g:10,h:11
    ), [
      a:1,b:2,c:'C',d:'D',e:[],f:9
      g:10,h:11,i:'I',j:'J',k:Hash.new
      l:null
    ])
  }
}
