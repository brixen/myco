
RubyEval < BasicObject {
  from_string: |string| ::Kernel.instance_method(:eval).bind(self).call(string)
}

Decorator < BasicObject {
  apply: |binding| { }
}

Object < BasicObject {
  
  if:     |cond, &blk| cond && blk.call
  unless: |cond, &blk| cond || blk.call
  
  __signal__: |name| {
    decorators.on.signal_handlers.fetch(name, []).each |b| { b.result }
  }
  
  [decorators]
  
  on: Decorator {
    signal_handlers: Hash.new
    
    apply: |binding| {
      list = self.signal_handlers.fetch(binding.name, Array.new)
      list.push(binding)
      signal_handlers.send("[]=".to_sym, binding.name, list)
    }
  }
  
}
