
RubyEval < BasicObject {
  from_string: |string| ::Kernel.instance_method(:eval).bind(self).call(string)
}

Decorator < BasicObject {
  apply: |binding| { }
}

Object < BasicObject {
  
  if:     |cond, &blk| cond && blk.call
  unless: |cond, &blk| cond || blk.call
  
  __signal__: |name| {
    name = "__on_" name.to_s "__"
    STDOUT.puts(respond_to?(name.to_sym))
    if(respond_to?(name.to_sym)) { send(name.to_sym) }
  }
  
  [decorators]
  
  on: Decorator {
    apply: |binding| {
      name = "__on_" binding.name.to_s "__"
      binding.name = name.to_sym
    }
  }
  
}
