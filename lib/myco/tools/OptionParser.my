
# TODO: fix constant lookup to make importing of constants from a file work
# OptionParser < Object {
::Myco::OptionParser < Object {
  banner: ""
  width:  30
  config: null
  
  parse: |argv=ARGV| parser.parse(argv)
  parser: {
    p = Rubinius::Options.new(banner, width, config)
    options.memes.each |name, meme| {
      meme.result.register_in_parser(p, name)
    }
    p
  }
  
  
  Option < Object {
    # TODO: don't use an instance_variable
    "parser":      instance_variable_get("@parser")
    "parser=": |x| instance_variable_set("@parser", x)
    
    register_in_parser: |parser, name| {
      self.parser = parser
      
      args = [name, (self?argument || null), long_form, description]
      args = args.compact
      args = args.map |arg| { arg.to_s }
      
      STDOUT.puts()
      
      parser.on(*args) |arg| { do(arg) }
    }
    
    # TODO: remove
    method_missing: |*a,&b| parent.send(*a,&b)
  }
}
