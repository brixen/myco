
CodeTools::AST << {
  
  ParameterAssembly < Node {
    var required: []
    var optional: []
    var splat:    null
    var post:     []
    var kwargs:   []
    var kwrest:   null
    var block:    null
    
    Form: [:params, :required, :optional, :splat, :post, :kwargs, :kwrest, :block]
    
    # Called on a new method or block generator
    # to set up various parameter-related properties.
    generator_setup: |g| {
      g.required_args = self.required.size + self.post.size
      
      g.post_args = self.post.size
      
      g.total_args =
        self.required.size + self.optional.size + self.post.size
        + ((self.kwargs.any? || self.kwrest) &? 1 ?? 0)
      
      g.splat_index =
        self.splat &? (self.required.size + self.optional.size) ?? null
      
      g.block_index = self.block && (
        self.required.size
        + self.optional.size
        + (self.splat &? 1 ?? 0)
        + self.post.size
        + ((self.kwargs.any? || self.kwrest) &? 1 ?? 0)
        + 1 # for self.block
      )
      
      g.arity         = self.arity
      
      g.keywords      = self.keyword_entries
    }
    
    # TODO: remove/refactor out
    required_and_optional_kwargs: {
      # TODO: perhaps make these be given separately?
      required_kwargs = []
      optional_kwargs = []
      
      self.kwargs.each |param| {
        # TODO: use nil or some other param.value to represent required kwarg
        (param.value.kind_of?(SymbolLiteral) && param.value.value == :"*")
        &? required_kwargs.push(param)
        ?? optional_kwargs.push(param)
      }
      
      ret = [required_kwargs, optional_kwargs]
    }
    
    # TODO: remove/refactor out
    keyword_entries: {
      entries = required_and_optional_kwargs
      entries.first.map! |x| { [x.name, true] }
      entries.last.map! |x| { [x.name, false] }
      entries = entries.flatten(2)
      entries.empty? &? null ?? entries
    }
    
    # TODO: remove/refactor out
    arity: {
      arity = self.required.size + self.post.size
      
      # Check for required kwargs
      kwargs_are_required = self.kwargs.select |param| {
        # TODO: use nil or some other param.value to represent required kwarg
        (param.value.kind_of?(SymbolLiteral) && param.value.value == :"*")
      }
      
      kwargs_are_required && (
        arity = arity + 1
      )
      
      (self.splat
      || self.optional.any?
      || (kwargs.any? && !kwargs_are_required)) && (
        arity = arity + 1
        arity = arity * -1
      )
      
      arity
    }
    
    names: [
      *self.required.map(&:name),
      *self.optional.map(&:name),
      *(self.splat.is_a?(Symbol) &? [self.splat] ?? []),
      *self.post,
      *self.kwargs.map(&:name),
      *(self.kwrest.is_a?(Symbol) &? [self.kwrest] ?? []),
      *(self.block &? [self.block.name] ?? []),
    ]
    
    map_locals: |scope| {
      self.required.each |param| { param.map_local(scope) }
      self.optional.each |param| { param.map_local(scope) }
      self.splat && (self.splat.is_a?(Symbol) &? scope.new_local(self.splat) ?? scope.new_local(:"*"))
      self.post.each     |name| { scope.new_local(name) }
      
      (self.kwargs.any? || self.kwrest) && scope.new_local(:__myco_kwargs_value__)
      self.kwargs.each |var| { scope.assign_local_reference(var) }
      self.kwrest && (self.kwrest.is_a?(Symbol) && scope.new_local(self.kwrest))
      
      self.block && scope.assign_local_reference(self.block)
    }
    
    # TODO: simplify
    bytecode: |g| {
      g.state.check_for_locals = false
      self.map_locals(g.state.scope)
      
      self.required.each |param| { param.bytecode(g) }
      self.optional.each |param| { param.bytecode(g) }
      
      (self.kwargs.any? || self.kwrest) && (
        kw_done = g.new_label
        assignments_label = g.new_label
        missing_value_label = g.new_label
        defaults_label = g.new_label
        
        kwargs_value_var = g.state.scope.search_local(:__myco_kwargs_value__)
        kwargs_value_var.get_bytecode(g)
        
        g.dup; g.goto_if_not_nil(assignments_label) # TODO: trivially remove this line?
        
        g.pop
        g.push_cpath_top
        g.find_const(:Hash)
        g.send(:allocate, 0, true)
        
        assignments_label.set!
        
        entries = self.required_and_optional_kwargs
        required_kwargs = entries.first
        optional_kwargs = entries.last
        
        required_kwargs.each |param| {
          g.dup
          
          g.push_literal(param.name)
          g.send(:find_item, 1, true)
          
          g.dup
          g.goto_if_false(missing_value_label)
          
          g.send(:value, 0, true)
          
          param.variable.set_bytecode(g)
          g.pop
        }
        
        g.goto(defaults_label)
        
        missing_value_label.set!
        g.pop
        g.push_rubinius
        g.find_const(:Runtime)
        g.swap
        g.send(:keywords_missing, 1, true)
        g.goto(kw_done)
        
        defaults_label.set!
        
        extra_keys_label = g.new_label
        
        optional_kwargs.empty? &? (
          g.dup
          g.send(:size, 0, true)
          g.push(required_kwargs.size)
          g.goto_if_not_equal(extra_keys_label)
          
          self.kwrest.is_a?(Symbol) && (
            g.push_cpath_top
            g.find_const(:Hash)
            g.send(:allocate, 0, true)
            kwrest_asgn = g.state.scope.search_local(self.kwrest)
            kwrest_asgn.set_bytecode(g)
            g.pop
          )
          
          g.goto(kw_done)
        ) ?? (
          optional_kwargs.each |arg| {
            next_value_label = g.new_label
            default_value_label = g.new_label
            
            g.dup
            g.push_literal(arg.name)
            g.send(:find_item, 1, true)
            
            g.dup
            g.goto_if_false(default_value_label)
            
            g.send(:value, 0, true)
            arg.variable.set_bytecode(g)
            g.goto(next_value_label)
            
            default_value_label.set!
            g.pop
            arg.bytecode(g)
            
            next_value_label.set!
            g.pop
          }
        )
        
        extra_keys_label.set!
        
        g.dup
        g.push_rubinius
        g.find_const(:Runtime)
        g.swap
        
        self.kwrest &? g.push(:true) ?? g.push(:false)
        
        g.send(:keywords_extra, 2, true)
        self.kwrest.is_a?(Symbol) && (
          kwrest_asgn = g.state.scope.search_local(self.kwrest)
          kwrest_asgn.set_bytecode(g)
        )
        g.pop
        
        kw_done.set!
      )
      
      self.block && self.block.bytecode(g)
      
      g.state.check_for_locals = true
    }
  }
  
}
