
CodeTools::AST << {
  
  Scope < CodeTools::Compiler::LocalVariables, BasicObject {
    var parent
    var eval_scope
    
    CompilerClass: CodeTools::Compiler # TODO: remove this
    
    # Look up a local variable in this block's scope.
    search_local: |name| {
      (variable = self.variables[name]) &? (
        variable.nested_reference
      ) ?? ((reference = self.parent && self.parent.search_local(name)) &? (
        reference.depth = reference.depth + 1
        reference
      ) ?? ((variable = search_eval_scope(name)) &? (
        self.variables[name] = variable
        variable.nested_reference
      ) ?? (
        null
      )))
    }
    
    # Assign a slot number to a new or retrieve an existing local variable.
    assign_local_reference: |name| {
      (variable = self.variables[name]) &? (
        variable.reference
      ) ?? ((reference = self.parent && self.parent.search_local(name)) &? (
        reference.depth = reference.depth + 1
        reference
      ) ?? ((variable = search_eval_scope(name)) &? (
        self.variables[name] = variable
        variable.nested_reference
      ) ?? (
        variable = self.new_local(name)
        variable.reference
      )))
    }
    
    # Search the eval_scope (Rubinius::VariableScope) for a local variable.
    search_eval_scope: |name| {
      depth = 1
      scope = eval_scope
      variable = null
      scope && loop {
        (slot = scope.method.local_slot(name)) && (
          variable = CompilerClass::NestedLocalVariable.new(depth, slot)
          break
        )
        depth = depth + 1
        scope = scope.parent
        scope || break
      }
      variable
    }
    
    new_local: |name| {
      self.variables[name] = \
        self.variables[name] || CompilerClass::LocalVariable.new(allocate_slot)
    }
  }
  
}