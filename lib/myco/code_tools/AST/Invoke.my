
CodeTools::AST << {
  
  Invoke < Node {
    var receiver, var name, var arguments, var block_params, var block
    
    Form: [:invoke, :receiver, :name, :arguments, :block_params, :block]
    
    bytecode: |g| pos(g); implementation.bytecode(g)
    
    implementation: {
      # TODO: error if passing both block argument and block literal
      # Currently, this fails silently and ignores the block argument
      # TODO: don't change AST state from here
      self.block && (
        self.arguments = self.arguments || ArgumentAssembly.new(line:self.line, body:[])
        self.block_params = self.block_params || ParameterAssembly.new(line:self.line)
        self.arguments.block = BlockLiteral.new(line:self.line, parameters:self.block_params, body:self.block)
      )
      
      self.receiver.nil? && self.arguments.nil? &? (
        LocalVariableAccessAmbiguous.new(
          line: self.line
          name: self.name
        )
      ) ?? (
        InvokeMethod.new(
          line:      self.line
          receiver:  self.receiver || Self.new(line:self.line)
          name:      self.name
          arguments: self.arguments || ArgumentAssembly.new(line:self.line, body:[])
        )
      )
    }
  }
  
}
