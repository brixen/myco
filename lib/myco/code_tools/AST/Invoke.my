
CodeTools::AST << {
  
  Invoke < Node {
    var receiver, var name, var arguments, var block
    
    Form: [:invoke, :receiver, :name, :arguments, :block]
    
    bytecode: |g| pos(g); implementation.bytecode(g)
    
    implementation: {
      use_args = self.arguments
      
      # TODO: error if passing both block argument and block literal
      # Currently, this fails silently and ignores the block argument
      self.block && (
        use_args = (use_args && use_args.dup) || ArgumentAssembly.new(line:self.line, body:[])
        use_args.block = self.block
      )
      
      self.receiver.nil? && use_args.nil? &? (
        LocalVariableAccessAmbiguous.new(
          line: self.line
          name: self.name
        )
      ) ?? (
        InvokeMethod.new(
          line:      self.line
          receiver:  self.receiver || Self.new(line:self.line)
          name:      self.name
          arguments: use_args || ArgumentAssembly.new(line:self.line, body:[])
        )
      )
    }
  }
  
}
