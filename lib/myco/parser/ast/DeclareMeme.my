
CodeTools::AST << {
  
  BuilderMethods << {
    meme: |loc, name, decorations, arguments, body| DeclareMeme.new(
      line:        loc.line
      name:        name
      decorations: decorations
      arguments:   arguments
      body:        body
    )
  }
  
  DeclareMemeBody < BlockLiteral {
    var name
    
    bytecode: |g| {
      pos(g)
      
      g.state.scope.nest_scope(self)
      
      meth = new_generator(g, self.name, self.arguments)
      
      meth.push_state(self)
      meth.state.push_super(self)
      meth.definition_line(self.line)
      
      meth.state.push_name(self.name.to_sym)
      
      self.arguments.bytecode(meth)
      self.body.bytecode(meth)
      
      meth.state.pop_name
      
      meth.local_count = local_count
      meth.local_names = local_names
      
      meth.ret
      meth.close
      meth.pop_state
      
      g.push_scope
      g.send(:for_method_definition, 0)
      g.add_scope
      
      # Create the BlockEnvironment from the meth Generator
      g.create_block(meth)
    }
  }
  
  DeclareMeme < Node, BasicObject {
    var name, var decorations, var arguments, var body
    
    setter name: |x|
      x.value
    setter decorations: |x|
      x || ArrayAssembly.new(line:line, body:[])
    setter arguments: |x|
      x || ParameterAssembly.new(line:line, required:[], splat:true)
    setter body: |x|
      x || NullLiteral.new(line:line)
    
    to_sexp: [:meme
      self.name
      self.decorations.to_sexp
      self.arguments.to_sexp
      self.body.to_sexp
    ]
    
    body_implementation: DeclareMemeBody.new(
      line:      self.line
      name:      self.name
      arguments: self.arguments
      body:      self.body
    )
    
    bytecode: |g| {
      pos(g)
      
      ##
      # module = scope.for_method_definition
      # module.send :declare_meme, self.name, self.decorations,
      #   BlockEnvironment(body_implementation)
      #
      g.push_scope
      g.send(:for_method_definition, 0)
        g.push_literal(self.name)
        self.decorations.bytecode(g)
        body_implementation.bytecode(g)
      g.send(:declare_meme, 3)
    }
  }
  
}
