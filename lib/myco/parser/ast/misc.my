
CodeTools::AST << {
  
  # Helper methods for bytecode generation
  ::CodeTools::Generator << {
    push_myco: push_cpath_top; find_const(:"Myco")
    push_void: push_myco;      find_const(:"Void")
    push_null: push_nil
  }
  
  Self < Node {
    Form: [:self]
    bytecode: |g| pos(g); g.push_self
  }
  
  NullLiteral < Node {
    Form: [:null]
    bytecode: |g| pos(g); g.push_null
  }
  
  VoidLiteral < Node {
    Form: [:void]
    bytecode: |g| pos(g); g.push_void
  }
  
  TrueLiteral < Node {
    Form: [:true]
    bytecode: |g| pos(g); g.push_true
  }
  
  FalseLiteral < Node {
    Form: [:false]
    bytecode: |g| pos(g); g.push_false
  }
  
  # TODO: use some other way to be eager
  EVALUATE_NOW: ::CodeTools::AST.component_eval {
    constants.select |const_name| {
      const_get(const_name).constants.include?(:"Form")
      }.each |const_name| {
        component = const_get(const_name)
        form = component.const_get(:"Form").dup
        form_name = form.shift
        
        BuilderMethods.declare_meme(form_name) |*args| {
          inst = component.new
          loc = args.shift
          inst.line = loc.line
          form.zip(args).each |key, value| {
            inst.send(:""key"=", value)
          }
          inst
        }
      }
    }
  }
}
