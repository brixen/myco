
CodeTools::AST << {
  
  # These builder methods are copied directly from rubinius-processor
  # TODO: remove all dependencies on rubinius-processor and rubinius-ast
  BuilderMethods << {
    args: |loc, required, optional, splat, post, kwargs, kwrest, block|
      Parameters.new(loc.line, required, optional, splat, post, kwargs, kwrest, block)
    
    block: |loc, array|
      Block.new(loc.line, array)
    
    block_pass: |loc, arguments, body|
      BlockPass19.new(loc.line, arguments, body)
    
    evstr: |loc, value|
      ToString.new(loc.line, value)
    
    dsym: |loc, str, array|
      DynamicSymbol.new(loc.line, str, array)
    
    dstr: |loc, str, array|
      DynamicString.new(loc.line, str, array)
  }
  
  # Helper methods for bytecode generation
  ::CodeTools::Generator << {
    push_myco: push_cpath_top; find_const(:"Myco")
    push_void: push_myco;      find_const(:"Void")
    push_null: push_nil
  }
  
  # These builder methods process the null and void literals
  BuilderMethods << {
    self:  |loc| Self.new(line:loc.line)
    null:  |loc| NullLiteral.new(line:loc.line)
    void:  |loc| VoidLiteral.new(line:loc.line)
    true:  |loc| TrueLiteral.new(line:loc.line)
    false: |loc| FalseLiteral.new(line:loc.line)
  }
  
  Self < Node {
    to_sexp: [:self]
    bytecode: |g| pos(g); g.push_self
  }
  
  NullLiteral < Node {
    to_sexp: [:null]
    bytecode: |g| pos(g); g.push_null
  }
  
  VoidLiteral < Node {
    to_sexp: [:void]
    bytecode: |g| pos(g); g.push_void
  }
  
  TrueLiteral < Node {
    to_sexp: [:true]
    bytecode: |g| pos(g); g.push_true
  }
  
  FalseLiteral < Node {
    to_sexp: [:false]
    bytecode: |g| pos(g); g.push_false
  }
  
}
