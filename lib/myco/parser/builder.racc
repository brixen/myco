class MycoBuilder
  token T_CONSTANT T_IDENTIFIER
        T_DEFINE T_COMMA
        T_DECLARE_BEGIN T_DECLARE_END
        T_DECLSTR_BEGIN T_DECLSTR_END T_DECLSTR_BODY
        T_BINDING_BEGIN T_BINDING_END

options no_result_var


rule
  main:
    cdefn
  | cbind
  | declobj
  | declstr
  | constant
  ;
  
  
  constant:
    T_CONSTANT
      { ast(:const, val[0], val[0][1].to_sym) }
  ;
  
  constant_list_:
    constant_list_ T_COMMA constant { [*val.first, val.last] }
  | constant                        { val }
  ;
  
  constant_list:
    constant_list_
      { ast(:array, val.first[0], val[0]) }
  ;
  
  declobj_expr:
    declobj
  | declstr
  | constant
  ;
  
  declobj_expr_body_:
    declobj_expr_body_ declobj_expr { [*val.first, val.last] }
  | declobj_expr                    { val }
  ;
  
  declobj_expr_body:
    declobj_expr_body_ T_DECLARE_END { ast(:block, val.first[0], val[0]) }
  | T_DECLARE_END                    { ast(:nil, val[0]) }
  ;
  
  declobj:
    constant_list T_DECLARE_BEGIN declobj_expr_body
      {
        ast(:declobj, val[1], val[0], val[2])
      }
  ;
  
  declstr_body:
    T_DECLSTR_BODY
      { ast(:str, val[0], val[0][1]) }
  ;
  
  declstr:
    constant_list T_DECLSTR_BEGIN declstr_body T_DECLSTR_END
      { ast(:declstr, val[1], val[0], val[2]) }
  ;
  
  binding_expr:
    declobj
  | declstr
  | constant
  ;
  
  cbind:
    constant T_BINDING_BEGIN binding_expr T_BINDING_END
      { ast(:cdecl, val[1], val[0], val[2]) }
  ;
  
  cdefn:
    constant T_DEFINE declobj
      { ast(:cdefn, val[1], val[0], val[2]) }
  ;

---- inner
  attr_accessor :processor
  
  def parse string
    @tokens = Myco::ToolSet::Parser::Lexer.new(string).lex
    do_parse
  end
  
  def next_token
    tok = @tokens.shift
    [ tok[0], tok ] if tok
  end
  
  # Generate an AST::Node of the given type
  #
  # @param type [Symbol] The type of AST::Node to generate
  # @param locator [Array,AST::Node] The object from which to determine the
  #   source location where the AST::Node is to reference as its location.
  #   If it is an lexer token (Array), the location is pulled from it;
  #   if it is an AST::Node, the location for this node will be copied from it. 
  # @param args [Array] The arguments to pass to the processor method that
  #   will generate the AST::Node; usually the same as the arguments that will
  #   eventually be passed to the AST::Node's constructor.
  #
  def ast type, locator, *args
    line = locator.is_a?(Array) ? locator[2] : locator.line
    @processor.send :"process_#{type}", line, *args
  end
