class Myco::ToolSet::Builder
  token T_CONSTANT T_IDENTIFIER T_SYMBOL
        T_NIL T_TRUE T_FALSE
        T_INTEGER T_FLOAT
        T_OP_PLUS T_OP_MINUS T_OP_MULT T_OP_DIV T_OP_MOD T_OP_EXP T_OP_COMPARE
        T_DEFINE T_CONST_SEP T_EXPR_SEP T_ARG_SEP T_DOT T_SCOPE T_ASSIGN
        T_DECLARE_BEGIN  T_DECLARE_END
        T_DECLSTR_BEGIN  T_DECLSTR_END  T_DECLSTR_BODY
        T_STRING_BEGIN   T_STRING_END   T_STRING_BODY
        T_SYMSTR_BEGIN   T_SYMSTR_END   T_SYMSTR_BODY
        T_CATEGORY_BEGIN T_CATEGORY_END T_CATEGORY_BODY
        T_BINDING_BEGIN  T_BINDING_END
        T_PARAMS_BEGIN   T_PARAMS_END
        T_ARGS_BEGIN     T_ARGS_END
        T_PAREN_BEGIN    T_PAREN_END
        T_ARRAY_BEGIN    T_ARRAY_END

options no_result_var


prechigh
  left T_SCOPE
  left T_DOT
  left T_OP_EXP
  left T_OP_MULT T_OP_DIV T_OP_MOD
  left T_OP_PLUS T_OP_MINUS
  left T_OP_COMPARE
  left T_ASSIGN
preclow


rule
  main:
    declobj_expr
  ;
  
  
  # Expressions allowable inside object declarations
  declobj_expr:
    cdefn
  | cbind
  | bind
  | deco
  | declobj
  | declstr
  | category
  | constant
  ;
  
  # Expressions allowable inside bindings
  bind_expr:
    declobj
  | declstr
  | arg_expr
  ;
  
  # Expressions allowable as function arguments
  arg_expr:
    arg_expr_atom
  | two_term_expr
  | assignment
  | nest_assignment
  | lit_string
  | lit_symstr
  | dyn_string
  | dyn_symstr
  ;
  
  # Expressions allowable as function arguments and in string juxtapositions
  arg_expr_atom:
    paren_expr
  | call_with_args
  | nest_call
  | constant
  | id_as_lambig
  | lit_nil
  | lit_true
  | lit_false
  | lit_integer
  | lit_float
  | lit_symbol
  | lit_array
  ;
  
  ##
  # Simple literals
  
  lit_nil:
    T_NIL      { ast(:nil, val[0]) }
  ;
  
  lit_true:
    T_TRUE     { ast(:true, val[0]) }
  ;
  
  lit_false:
    T_FALSE    { ast(:false, val[0]) }
  ;
  
  lit_integer:
    T_INTEGER  { ast(:lit, val[0], Integer(val[0][1])) }
  ;
  
  lit_float:
    T_FLOAT    { ast(:lit, val[0], Float(val[0][1])) }
  ;
  
  lit_symbol:
    T_SYMBOL   { ast(:lit, val[0], val[0][1].to_sym) }
  ;
  
  lit_string:
    T_STRING_BEGIN T_STRING_BODY T_STRING_END { val[1] }
      { ast(:lit, val[1], encode_escapes(val[1][1])) }
  ;
  
  lit_string_as_symbol: # Used in contexts where a bare string is a symbol
    T_STRING_BEGIN T_STRING_BODY T_STRING_END { val[1] }
      { ast(:lit, val[1], encode_escapes(val[1][1]).to_sym) }
  ;
  
  lit_symstr:
    T_SYMSTR_BEGIN T_SYMSTR_BODY T_SYMSTR_END
      { ast(:lit, val[1], encode_escapes(val[1][1]).to_sym) }
  ;
  
  ##
  # String interpolations / juxtapositions
  
  dyn_string_part:
    arg_expr_atom lit_string      { val }
  ;
  
  dyn_string_parts:
    dyn_string_parts dyn_string_part { [*val[0], *val[1]] }
  | dyn_string_part                  { val[0] }
  ;
  
  dyn_string:
    lit_string dyn_string_parts { ast(:dstr, val[0], val[0].value, val[1]) }
  ;
  
  dyn_symstr:
    lit_symstr dyn_string_parts { ast(:dsym, val[0], val[0].value.to_s, val[1])}
  ;
  
  ##
  # Constants
  
  constant:
    constant T_SCOPE T_CONSTANT { ast(:colon2, val[1], val[0], val[2][1].to_sym) }
  | T_SCOPE T_CONSTANT          { ast(:colon3, val[0], val[1][1].to_sym) }
  | T_CONSTANT                  { ast(:const,  val[0], val[0][1].to_sym) }
  ;
  
  constant_list_:
    constant_list_ T_CONST_SEP constant { [*val[0], val[2]] }
  | constant                            { val }
  ;
  
  constant_list:
    constant_list_
      { ast(:array, val[0][0], val[0]) }
  ;
  
  ##
  # Bare identifiers
  
  id_as_symbol: # Used in contexts where a bare identifier is a symbol
    T_IDENTIFIER
      { ast(:lit, val[0], val[0][1].to_sym) }
  ;
  
  id_as_lambig: # Ambiguous - could be local variable or call without args
    T_IDENTIFIER
      { ast(:lambig, val[0], val[0][1].to_sym) }
  ;
  
  ##
  # Assignment
  
  assignment:
    T_IDENTIFIER T_ASSIGN arg_expr
      { ast(:lasgn, val[1], val[0][1].to_sym, val[2]) }
  ;
  
  nest_assignment:
    arg_expr T_DOT T_IDENTIFIER T_ASSIGN arg_expr
      { ast(:call, val[3], val[0], :"#{val[2][1]}=", ast(:array, val[4], [val[4]])) }
  ;
  
  
  ##
  # Function calls
  
  call_with_args:
    T_IDENTIFIER arg_list
      { ast(:call, val[1], ast(:self, val[0]), val[0][1].to_sym, val[1]) }
  ;
  
  nest_call:
    arg_expr T_DOT T_IDENTIFIER
      { ast(:call, val[2], val[0], val[2][1].to_sym, ast(:array, val[2], [])) }
  | arg_expr T_DOT T_IDENTIFIER arg_list
      { ast(:call, val[3], val[0], val[2][1].to_sym, val[3]) }
  ;
  
  ##
  # Argument lists
  
  arg_sepd_expr:
    T_ARG_SEP arg_expr           { val[1] }
  | T_ARG_SEP                    { nil }
  ;
  
  arg_sepd_exprs:
    arg_sepd_exprs arg_sepd_expr { [*val[0], val[1]].compact }
  | arg_sepd_expr                { val.compact }
  ;
  
  arg_list_:
    arg_expr arg_sepd_exprs T_ARGS_END  { ast(:array, val[0], [val[0], *val[1]]) }
  | arg_sepd_exprs T_ARGS_END           { val[0].empty? ? ast(:nil, val[1]) : ast(:array, val[0][0], val[0]) }
  | arg_expr T_ARGS_END                 { ast(:array, val[0], [val[0]]) }
  | T_ARGS_END                          { ast(:array, val[0], []) }
  ;
  
  arg_list:
    T_ARGS_BEGIN arg_list_  { val[1] }
  ;
  
  ##
  # Parameter lists
  
  param:
    T_IDENTIFIER
      { val[0][1].to_sym }
  | T_IDENTIFIER T_ASSIGN arg_expr
      { ast(:lasgn, val[1], val[0][1].to_sym, val[2]) }
  ;
  
  param_sepd:
    T_ARG_SEP param        { val[1] }
  | T_ARG_SEP              { nil }
  ;
  
  param_sepds:
    param_sepds param_sepd { [*val[0], val[1]].compact }
  | param_sepd             { val.compact }
  ;
  
  param_list_:
    param param_sepds T_PARAMS_END  { [val[0], *val[1]] }
  | param_sepds T_PARAMS_END        { val[0] }
  | param T_PARAMS_END              { [val[0]] }
  | T_PARAMS_END                    { [] }
  ;
  
  param_list:
    T_PARAMS_BEGIN param_list_
      {
        required, optional = [], []
        
        required << val[1].shift while val[1][0] && val[1][0].is_a?(Symbol)
        optional << val[1].shift while val[1][0] && val[1][0].sexp_name==:lasgn
        optional = optional.empty? ? nil : ast(:block, val[0], optional)
        ast(:args, val[0], required, optional, false, nil, nil)
      }
  ;
  
  ##
  # Array literals
  
  lit_array_:
    arg_expr arg_sepd_exprs T_ARRAY_END  { ast(:array, val[0], [val[0], *val[1]]) }
  | arg_sepd_exprs T_ARRAY_END           { val[0].empty? ? ast(:nil, val[1]) : ast(:array, val[0][0], val[0]) }
  | arg_expr T_ARRAY_END                 { ast(:array, val[0], [val[0]]) }
  | T_ARRAY_END                          { ast(:array, val[0], []) }
  ;
  
  lit_array:
    T_ARRAY_BEGIN lit_array_  { val[1] }
  ;
  
  ##
  # Two-term operators
  
  two_term_expr:
    arg_expr T_OP_PLUS arg_expr
      { ast(:call, val[1], val[0], :'+', ast(:array, val[2], [val[2]])) }
  | arg_expr T_OP_MINUS arg_expr
      { ast(:call, val[1], val[0], :'-', ast(:array, val[2], [val[2]])) }
  | arg_expr T_OP_MULT arg_expr
      { ast(:call, val[1], val[0], :'*', ast(:array, val[2], [val[2]])) }
  | arg_expr T_OP_DIV arg_expr
      { ast(:call, val[1], val[0], :'/', ast(:array, val[2], [val[2]])) }
  | arg_expr T_OP_MOD arg_expr
      { ast(:call, val[1], val[0], :'%', ast(:array, val[2], [val[2]])) }
  | arg_expr T_OP_EXP arg_expr
      { ast(:call, val[1], val[0], :'**', ast(:array, val[2], [val[2]])) }
  | arg_expr T_OP_COMPARE arg_expr
      { ast(:call, val[1], val[0], val[1][1].to_sym, ast(:array, val[2], [val[2]])) }
  ;
  
  ##
  # Object declarations
  
  declobj_sepd_expr:
    T_EXPR_SEP declobj_expr              { val[1] }
  | T_EXPR_SEP                           { nil }
  ;
  
  declobj_sepd_exprs:
    declobj_sepd_exprs declobj_sepd_expr { [*val[0], val[1]].compact }
  | declobj_sepd_expr                    { val.compact }
  ;
  
  declobj_expr_body:
    declobj_expr declobj_sepd_exprs T_DECLARE_END  { ast(:block, val[0], [val[0], *val[1]]) }
  | declobj_sepd_exprs T_DECLARE_END               { val[0].empty? ? ast(:nil, val[1]) : ast(:block, val[0][0], val[0]) }
  | declobj_expr T_DECLARE_END                     { ast(:block, val[0], [val[0]]) }
  | T_DECLARE_END                                  { ast(:nil, val[0]) }
  ;
  
  declobj:
    constant_list T_DECLARE_BEGIN declobj_expr_body
      { ast(:declobj, val[1], val[0], val[2]) }
  ;
  
  cdefn:
    constant T_DEFINE declobj
      { ast(:cdefn, val[1], val[0], val[2]) }
  ;
  
  ##
  # String declarations
  
  declstr_body:
    T_DECLSTR_BODY
      { ast(:str, val[0], val[0][1]) }
  ;
  
  declstr:
    constant_list T_DECLSTR_BEGIN declstr_body T_DECLSTR_END
      { ast(:declstr, val[1], val[0], val[2]) }
  ;
  
  ##
  # Bindings and etc..
  
  bind_sepd_expr:
    T_EXPR_SEP bind_expr           { val[1] }
  | T_EXPR_SEP                     { nil }
  ;
  
  bind_sepd_exprs:
    bind_sepd_exprs bind_sepd_expr { [*val[0], val[1]].compact }
  | bind_sepd_expr                 { val.compact }
  ;
  
  bind_expr_body:
    bind_expr bind_sepd_exprs T_BINDING_END  { ast(:block, val[0], [val[0], *val[1]]) }
  | bind_sepd_exprs T_BINDING_END            { val[0].empty? ? ast(:nil, val[1]) : ast(:block, val[0][0], val[0]) }
  | bind_expr T_BINDING_END                  { ast(:block, val[0], [val[0]]) }
  | T_BINDING_END                            { ast(:nil, val[0]) }
  ;
  
  paren_expr_body:
    bind_expr bind_sepd_exprs T_PAREN_END  { ast(:block, val[0], [val[0], *val[1]]) }
  | bind_sepd_exprs T_PAREN_END            { val[0].empty? ? ast(:nil, val[1]) : ast(:block, val[0][0], val[0]) }
  | bind_expr T_PAREN_END                  { val[0] }
  | T_PAREN_END                            { ast(:nil, val[0]) }
  ;
  
  paren_expr:
    T_PAREN_BEGIN paren_expr_body { val[1] }
  ;
  
  cbind:
    constant T_BINDING_BEGIN bind_expr_body
      { ast(:cdecl, val[1], val[0], val[2]) }
  ;
  
  bind_name:
    id_as_symbol
  | lit_string_as_symbol
  ;
  
  bind:
    bind_name param_list T_BINDING_BEGIN bind_expr_body
      { ast(:bind, val[1], val[0], nil, val[1], val[3]) }
  | bind_name T_BINDING_BEGIN bind_expr_body
      {
        args = ast(:args, val[0], [], nil, false, nil, nil)
        ast(:bind, val[1], val[0], nil, args, val[2])
      }
  ;
  
  deco_able:
    bind
  | deco
  ;
  
  deco:
    T_IDENTIFIER deco_able
      {
        val[1].decorations.body.push ast(:lit, val[0], val[0][1].to_sym)
        val[1]
      }
  ;
  
  category:
    T_CATEGORY_BEGIN T_CATEGORY_BODY T_CATEGORY_END
      { ast(:category, val[0], ast(:lit, val[1], val[1][1].to_sym)) }
  ;

---- inner
  attr_accessor :processor
  
  def parse string
    @tokens = Myco::ToolSet::Parser::Lexer.new(string).lex
    do_parse
  end
  
  def next_token
    tok = @tokens.shift
    [ tok[0], tok ] if tok
  end
  
  # Generate an AST::Node of the given type
  #
  # @param type [Symbol] The type of AST::Node to generate
  # @param locator [Array,AST::Node] The object from which to determine the
  #   source location where the AST::Node is to reference as its location.
  #   If it is an lexer token (Array), the location is pulled from it;
  #   if it is an AST::Node, the location for this node will be copied from it. 
  # @param args [Array] The arguments to pass to the processor method that
  #   will generate the AST::Node; usually the same as the arguments that will
  #   eventually be passed to the AST::Node's constructor.
  #
  def ast type, locator, *args
    line = locator.is_a?(Array) ? locator[2] : locator.line
    @processor.send :"process_#{type}", line, *args
  end
  
  def encode_escapes str
    str.gsub /\\(.)/ do "#{$1}" end
  end
