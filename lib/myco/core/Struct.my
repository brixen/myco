
::Myco::Struct < ::Myco::BasicObject {
  static var fields: []
  
  static lay_out_fields!: {
    Myco.add_thunk_method(singleton_class, :__tuple_size__, fields.size)
    fields.each_with_index |field, index| {
      Myco.add_thunk_method(self, :"__index_of_"field"_field__", index)
    }
  }
  
  static cast_args: |*args| cast(args.__tuple__)
  
  static cast: |tuple| {
    __tuple_size__ > tuple.size && (
      new_tuple = Rubinius::Tuple.pattern(__tuple_size__, Myco.undefined)
      new_tuple.copy_from(tuple, 0, tuple.size, 0)
      tuple = new_tuple
    )
    Rubinius::Unsafe.set_class(tuple, self)
  }
  
  "[]":  |index|        __tuple_at__(index)
  "[]=": |index, value| __tuple_put__(index, value)
  
  [decorators]
  
  const field: Decorator {
    apply: |meme| {
      meme.target.fields.push(meme.name)
      meme.target.lay_out_fields!
    }
    [transforms]
    field: true
  }
}
