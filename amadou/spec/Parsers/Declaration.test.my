
BasicSpec {
  name: "Amadou::Parsers::Declaration"
  
  tokenize: |input| {
    state = Amadou::Tokenizer.parse("{"input"}")
    state.result || state.raise_error
    phrases = state.result[:root]
    phrases.first.first_term
  }
  
  subject: Amadou::Parsers::Declaration
  
  assert_parses: |input, *expected, &block| {
    actual = subject.parse(tokenize(input)).map(&:representation)
    block &? block.call(actual) ?? assert_equal(actual, expected)
  }
  
  [tests]
  
  "empty declaration": {
    "" |> assert_parses()
  }
  
  "a single one-word empty meme": {
    "xyz" |> assert_parses(
      [:meme, 1, [:array, 1, [[:symbol, 1, :xyz]]], null]
    )
  }
  
  "several one-word empty memes": {
    "x, y, z" |> assert_parses(
      [:meme, 1, [:array, 1, [[:symbol, 1, :x]]], null]
      [:meme, 1, [:array, 1, [[:symbol, 1, :y]]], null]
      [:meme, 1, [:array, 1, [[:symbol, 1, :z]]], null]
    )
  }
  
  "a single multi-word empty meme": {
    "x y z" |> assert_parses(
      [:meme, 1, [:array, 1, [[:symbol, 1, :x]
                              [:symbol, 1, :y]
                              [:symbol, 1, :z]]], null]
    )
  }
}
