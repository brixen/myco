
BasicSpec {
  name: "Amadou::Parsers::Sequence"
  
  tokenize: |input| {
    state = Amadou::Tokenizer.parse("{"input"}")
    state.result || state.raise_error
    phrases = state.result[:root]
    phrases.first.first_term
  }
  
  subject: Amadou::Parsers::Sequence
  
  assert_parses: |input, *expected, &block| {
    actual = subject.parse(tokenize(input)).array.map(&:representation)
    block &? block.call(actual) ?? assert_equal(actual, expected)
  }
  
  [tests]
  
  "empty sequence": {
    "" |> assert_parses()
  }
  
  "a single integer": {
    "1" |> assert_parses(
      [:numeric, 1, 1]
    )
  }
  
  "several integers": {
    "1; 2; 3" |> assert_parses(
      [:numeric, 1, 1]
      [:numeric, 1, 2]
      [:numeric, 1, 3]
    )
  }
  
  "several integers (on separate lines)": {
    "1\n2\n3" |> assert_parses(
      [:numeric, 1, 1]
      [:numeric, 2, 2]
      [:numeric, 3, 3]
    )
  }
  
  "several integer sequences": {
    "(1; 2; 3); (7; 8; 9)" |> assert_parses(
      [:sequence, 1, [
        [:numeric, 1, 1]
        [:numeric, 1, 2]
        [:numeric, 1, 3]
      ]]
      [:sequence, 1, [
        [:numeric, 1, 7]
        [:numeric, 1, 8]
        [:numeric, 1, 9]
      ]]
    )
  }
  
  "simple immediate literals parsed as invokes": {
    "null; void; true; false; self" |> assert_parses(
      [:invoke, 1, null, :null,  null, null]
      [:invoke, 1, null, :void,  null, null]
      [:invoke, 1, null, :true,  null, null]
      [:invoke, 1, null, :false, null, null]
      [:invoke, 1, null, :self,  null, null]
    )
  }
  
  "several symbol literals": {
    l = 92.chr # escape-slash character: '\'
    ":xyz; :xyz?; :xyz!;" +
    ':"xyz"; :"x'+l+'"y'+l+l+'z'+l+l+l+'"";' +
    ":'xyz'; :'x"+l+"'y"+l+l+"z"+l+l+l+"''" |> assert_parses(
      [:symbol, 1, :xyz]
      [:symbol, 1, :xyz?]
      [:symbol, 1, :xyz!]
      [:symbol, 1, :xyz]
      [:symbol, 1, ('x"y'+l+'z'+l+'"').to_sym]
      [:symbol, 1, :xyz]
      [:symbol, 1, ("x'y"+l+"z"+l+"'").to_sym]
    )
  }
  
  "several constants": {
    "XYZ; X::Y::Z; ::XYZ; ::X::Y::Z" |> assert_parses(
      [:const, 1, false, [:XYZ]]
      [:const, 1, false, [:X, :Y, :Z]]
      [:const, 1, true,  [:XYZ]]
      [:const, 1, true,  [:X, :Y, :Z]]
    )
  }
  
  "several string literals": {
    l = 92.chr # escape-slash character: '\'
    '"xyz"; "x'+l+'"y'+l+l+'z'+l+l+l+'"";' +
    "'xyz'; 'x"+l+"'y"+l+l+"z"+l+l+l+"''" |> assert_parses(
      [:str, 1, 'xyz']
      [:str, 1, 'x"y'+l+'z'+l+'"']
      [:str, 1, "xyz"]
      [:str, 1, "x'y"+l+"z"+l+"'"]
    )
  }
  
  "operator clusters of integers": {
    "1 + 2 * 3 - 4" |> assert_parses(
      [:invoke, 1, [:invoke, 1, [:numeric, 1, 1], :"+", [:args, 1, [
        [:invoke, 1, [:numeric, 1, 2], :"*", [:args, 1, [
          [:numeric, 1, 3]
        ]], null]
      ]], null], :"-", [:args, 1, [
        [:numeric, 1, 4]
      ]], null]
    )
  }
  
  "branch operators around integers": {
    "1 &? 2 ?? 3" |> assert_parses(
      [:branch_op, 1, :"??"
        [:branch_op, 1, :"&?"
          [:numeric, 1, 1]
          [:numeric, 1, 2]]
        [:numeric, 1, 3]
      ]
    )
  }
  
  "unary operations": {
    "!1; !!2" |> assert_parses(
      [:invoke, 1,
        [:numeric, 1, 1],
        :"!", null, null
      ]
      [:invoke, 1,
        [:invoke, 1,
          [:numeric, 1, 2],
          :"!", null, null
        ],
        :"!", null, null
      ]
    )
  }
  
  "a single invocation (without arguments or blocks)": {
    "x" |> assert_parses(
      [:invoke, 1, null, :x, null, null]
    )
  }
  
  "chained invocations (without arguments or blocks)": {
    "x.y . z" |> assert_parses(
      [:invoke, 1,
        [:invoke, 1,
          [:invoke, 1, null, :x, null, null],
        :y, null, null],
      :z, null, null]
    )
  }
  
  "chained invocations (with arguments)": {
    "x().y (1) . z(2,3)" |> assert_parses(
      [:invoke, 1,
        [:invoke, 1,
          [:invoke, 1, null, :x, [:args, 1, []], null],
        :y, [:args, 1, [[:numeric, 1, 1]]], null],
      :z, [:args, 1, [[:numeric, 1, 2], [:numeric, 1, 3]]], null]
    )
  }
  
  "chained invocations (with arguments)": {
    "x.?y .? z(2,3)" |> assert_parses(
      [:quest, 1,
        [:quest, 1,
          [:invoke, 1, null, :x, null, null]
          [:invoke, 1, [:qrcvr, 1], :y, null, null]
        ]
        [:invoke, 1, [:qrcvr, 1], :z, [:args, 1, [
          [:numeric, 1, 2]
          [:numeric, 1, 3]
        ]], null]
      ]
    )
  }
  
  "chained invocations (with blocks)": {
    "x{}.y{1} . z { 2; 3 }" |> assert_parses(
      [:invoke, 1,
        [:invoke, 1,
          [:invoke, 1, null, :x, null, [:sequence, 1, []]],
        :y, null, [:sequence, 1, [[:numeric, 1, 1]]]],
      :z, null, [:sequence, 1, [[:numeric, 1, 2], [:numeric, 1, 3]]]]
    )
  }
  
  "chained operators as invocations": {
    "1.+(2.*(3.-) { 4; 5 })" |> assert_parses(
      [:invoke, 1, [:numeric, 1, 1], :"+", [:args, 1, [
        [:invoke, 1, [:numeric, 1, 2], :"*", [:args, 1, [
          [:invoke, 1, [:numeric, 1, 3], :"-", null, null]
        ]], [:sequence, 1, [
          [:numeric, 1, 4],
          [:numeric, 1, 5]
        ]]]
      ]], null]
    )
  }
  
  "element read operator invocations": {
    "x[1, y[z[]{ 2; 3 }]]" |> assert_parses(
      [:invoke, 1, [:invoke, 1, null, :x, null, null], :"[]", [:args, 1, [
        [:numeric, 1, 1],
        [:invoke, 1, [:invoke, 1, null, :y, null, null], :"[]", [:args, 1, [
          [:invoke, 1, [:invoke, 1, null, :z, null, null], :"[]", [:args, 1, [
          ]], [:sequence, 1, [
            [:numeric, 1, 2],
            [:numeric, 1, 3]
          ]]]
        ]], null]
      ]], null]
    )
  }
  
  "lines joined by dangling operators": {
    "1\n+ 2\n3 *\n4" |> assert_parses(
      [:invoke, 2, [:numeric, 1, 1], :"+", [:args, 2, [[:numeric, 2, 2]]], null]
      [:invoke, 3, [:numeric, 3, 3], :"*", [:args, 4, [[:numeric, 4, 4]]], null]
    )
  }
  
  "lines NOT joined together by symbol colons": {
    ":foo\n:bar" |> assert_parses(
      [:symbol, 1, :foo]
      [:symbol, 2, :bar]
    )
  }
}
