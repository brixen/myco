
Amadou << {
  
  Token < BasicObject {
    var source
    var range
    
    static from: |tags, source, start, stop| new(
      source: source
      range:  ::Ruby::Range.new(start, stop, true)
    ).tagged(*(tags.is_a?(Array) &? tags ?? [tags]))
    
    "+": |other| {
      tags = []
      
      (self.source == other.source)
      &? Token.from(tags, self.source, self.range.first, other.range.last)
      ?? Token.from(tags, self.source + other.source,
                   self.range.first, self.source.size + other.range.last)
    }
    
    text: source[range]
    size: range.size
    
    sym:              text.to_sym
    float:            text.to_f
    integer: |base=0| text.to_inum(base, true)
    
    inspect: "#<"self.class" "tags.inspect" "text.inspect">"
    
    representation: [last_tag, text] # TODO: show all tags
    
    var tag_table: Rubinius::LookupTable.new
    var last_tag: null # TODO: remove
    tags:         tag_table.keys
    tagged?: |t|  tag_table.key?(t)
    tagged: |*ts| {
      ts.each |t| { tag_table[t] = true }
      self.last_tag = ts.last
      self
    }
    
    var data: ::Ruby::Hash.new
    with_data: |data| self.data.merge!(data); self
    
    match?: |pattern| !!pattern.match(self.text)
    
    # Given a string, return a map of indices of newline positions to line numbers
    static memoize line_map_for: |string| {
      idx_hash = ::Ruby::Hash.new
      idx_hash[0] = 0
      count = 0
      idx = -1
      Loop.run {
        idx = string.index("\n", idx + 1)
        idx || Loop.break
        count = count + 1
        idx_hash[idx] = count
      }
      idx_hash
    }
    
    # Given an index and string, return the row (line) and column numbers
    static position_of: |idx, string| {
      nl_idx = string.rindex("\n", idx) || 0
      row = Token.line_map_for(string).fetch(nl_idx) + 1
      col = idx - nl_idx
      [row, col]
    }
    
    var position: self.class.position_of(range.first, source)
    row: position.first
    col: position.last
    line: row
  }
  
}
