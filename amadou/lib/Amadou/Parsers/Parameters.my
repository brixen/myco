
Amadou << {
  Parsers << {
    
    Parameters: Base {
      parse: |group| {
        output = AST::ParameterAssembly.new(line: group.start.line)
        
        group.phrases.each |phrase| {
          Loop.run {
            parse_phrase(output, phrase)
            # If not broken before this point, no match was found
            raise("No known meaning for parameter phrase: "phrase.inspect"")
          }
        }
        
        output
      }
      
      parse_phrase: |output, phrase| {
        phrase.term_count |> case (
          0, &{ Loop.break }
          1, &{ parse_phrase_1_term(output, *phrase.terms) }
          2, &{ parse_phrase_2_term(output, *phrase.terms) }
             &{ }
        )
      }
      
      parse_phrase_1_term: |output, term| {
        term.is_word? && term.is_local? && (
          output.required.push(ast.reqprm(term, term.token.sym))
          Loop.break
        )
        term.is_glyph? && (
          term.text == "*" && (
            output.rest && raise("Can't parse multiple rest parameters")
            output.rest = ast.restprm(term, :"*")
            Loop.break
          )
          term.text == "**" && (
            output.kwrest && raise("Can't parse multiple kwrest parameters")
            output.kwrest = ast.kwrestprm(term, :"**")
            Loop.break
          )
        )
      }
      
      parse_phrase_2_term: |output, term_a, term_b| {
        term_a.is_glyph? && term_b.is_word? && term_b.is_local? (
          term_a.text == "*" && (
            output.rest && raise("Can't parse multiple rest parameters")
            output.rest = ast.restprm(term_b, term_b.token.sym)
            Loop.break
          )
          term_a.text == "**" && (
            output.kwrest && raise("Can't parse multiple kwrest parameters")
            output.kwrest = ast.kwrestprm(term_b, term_b.token.sym)
            Loop.break
          )
        )
      }
    }
    
  }
}
