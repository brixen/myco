
Amadou << {
  Parsers << {
    
    Parameters: Base {
      parse: |group| {
        output = AST::ParameterAssembly.new(line: group.start.line)
        
        group.phrases.each |phrase| {
          state = parser.parse(phrase.list)
          state.end_idx || raise("No known meaning for parameter phrase: "phrase.inspect"")
          result = state.result[:root]
          handlers.__send__(result.first, output, result.last)
        }
        
        output
      }
      
      const parser: Pegleromyces::Stream::Parser {
        const grammar: Pegleromyces::Grammar {
          const local_word_pattern: Regexp.new("^([[:lower:]]|_)")
          s:                 si([:tagged?, [:space], true])
          glyph:      |text| si([:tagged?, [:glyph], true], [:text, [], text])
          word:       |text| si([:tagged?, [:word],  true])
          local_word:        si([:tagged?, [:word],  true]
                                [:match?,  [local_word_pattern], true])
          
          [rules]
          rule root: (
              r(none)        { [:none,        captures] }
            / r(required)    { [:required,    captures] }
            / r(rest_anon)   { [:rest_anon,   captures] }
            / r(kwrest_anon) { [:kwrest_anon, captures] }
            / r(rest)        { [:rest,        captures] }
            / r(kwrest)      { [:kwrest,      captures] }
            / r(block)       { [:block,       captures] }
            / r(kwrequired)  { [:kwrequired,  captures] }
            / r(optional)    { [:optional,    captures] }
            / r(kwoptional)  { [:kwoptional,  captures] }
          )[:root]
          
          rule none:        s+esi
          
          rule required:    s+ local_word[:name] +s+esi
          rule rest_anon:   s+ glyph("*")[:glyph] +s+esi
          rule kwrest_anon: s+ glyph("*")[:glyph] +s+ glyph("*") +s+esi
          
          rule rest:        s+ glyph("*") +s+ local_word[:name] +s+esi
          rule kwrest:      s+ glyph("*") +s+ glyph("*") +s+ local_word[:name] +s+esi
          rule block:       s+ glyph("&") +s+ local_word[:name] +s+esi
          rule kwrequired:  s+ local_word[:name] +s+ glyph(":") +s+esi
          
          rule optional:    s+ local_word[:name] +s+ glyph("=") + si.+[:value] +esi
          rule kwoptional:  s+ local_word[:name] +s+ glyph(":") + si.+[:value] +esi
        }
      }
      
      [handlers]
      
      none: {}
      
      required: |output, name:| {
        (output.optional.any? || output.rest) &? (
          output.post.push(ast.reqprm(name, name.sym))
        ) ?? (
          output.required.push(ast.reqprm(name, name.sym))
        )
      }
      
      rest_anon: |output, glyph:| {
        output.rest && raise("Can't parse multiple rest parameters")
        output.rest = ast.restprm(glyph, :"*")
      }
      
      kwrest_anon: |output, glyph:| {
        output.kwrest && raise("Can't parse multiple kwrest parameters")
        output.kwrest = ast.kwrestprm(glyph, :"**")
      }
      
      rest: |output, name:| {
        output.rest && raise("Can't parse multiple rest parameters")
        output.rest = ast.restprm(name, name.sym)
      }
      
      kwrest: |output, name:| {
        output.kwrest && raise("Can't parse multiple kwrest parameters")
        output.kwrest = ast.kwrestprm(name, name.sym)
      }
      
      block: |output, name:| {
        output.block && raise("Can't parse multiple block parameters")
        output.block = ast.blkprm(name, name.sym)
      }
      
      kwrequired: |output, name:| {
        output.kwrequired.push(ast.kwreqprm(name, name.sym))
      }
      
      optional: |output, name:, value:| {
        value = Parsers::Sequence.parse(Group.new(phrases: [Phrase.new(list: value)]))
        output.optional.push(ast.optprm(name, name.sym, value))
      }
      
      kwoptional: |output, name:, value:| {
        value = Parsers::Sequence.parse(Group.new(phrases: [Phrase.new(list: value)]))
        output.kwoptional.push(ast.kwoptprm(name, name.sym, value))
      }
    }
    
  }
}
