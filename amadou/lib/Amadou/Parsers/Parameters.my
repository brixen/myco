
Amadou << {
  Parsers << {
    
    Parameters: Base {
      parse: |group| {
        output = AST::ParameterAssembly.new(line: group.start.line)
        
        group.phrases.each |phrase| {
          result = engine.match(phrase)
          result || raise("No known meaning for parameter phrase: "phrase.inspect"")
          handlers.__send__(result.first, output, *result.last)
        }
        
        output
      }
      
      const engine: Engines::PhraseMatch {
        [rules]
        rule none:        null
        
        rule required:    word([Word, :local?])
        rule rest_anon:   glyph("*")
        rule kwrest_anon: glyph("**")
        
        rule rest:        glyph("*")  + word([Word, :local?])
        rule kwrest:      glyph("**") + word([Word, :local?])
        rule block:       glyph("&")  + word([Word, :local?])
        rule kwrequired:  word([Word, :local?]) + glyph(":")
        
        rule optional:    word([Word, :local?]) + glyph("=") + subphrase
        rule kwoptional:  word([Word, :local?]) + glyph(":") + subphrase
      }
      
      [handlers]
      
      none: {}
      
      required: |output, term| {
        (output.optional.any? || output.rest) &? (
          output.post.push(ast.reqprm(term, term.sym))
        ) ?? (
          output.required.push(ast.reqprm(term, term.sym))
        )
      }
      
      rest_anon: |output, name| {
        output.rest && raise("Can't parse multiple rest parameters")
        output.rest = ast.restprm(name, :"*")
      }
      
      kwrest_anon: |output, name| {
        output.kwrest && raise("Can't parse multiple kwrest parameters")
        output.kwrest = ast.kwrestprm(name, :"**")
      }
      
      rest: |output, glyph, name| {
        output.rest && raise("Can't parse multiple rest parameters")
        output.rest = ast.restprm(name, name.sym)
      }
      
      kwrest: |output, glyph, name| {
        output.kwrest && raise("Can't parse multiple kwrest parameters")
        output.kwrest = ast.kwrestprm(name, name.sym)
      }
      
      block: |output, glyph, name| {
        output.block && raise("Can't parse multiple block parameters")
        output.block = ast.blkprm(name, name.sym)
      }
      
      kwrequired: |output, name, glyph|
        output.kwrequired.push(ast.kwreqprm(name, name.sym))
      
      optional: |output, name, glyph, value| {
        value = Parsers::Sequence.parse(Nodes::Group.new(phrases: [value]))
        output.optional.push(ast.optprm(name, name.sym, value))
      }
      
      kwoptional: |output, name, glyph, value| {
        value = Parsers::Sequence.parse(Nodes::Group.new(phrases: [value]))
        output.kwoptional.push(ast.kwoptprm(name, name.sym, value))
      }
    }
    
  }
}
