
Amadou << {
  Parsers << {
    
    Sequence: Base {
      parse: |group| {
        output = []
        
        group.phrases.each |phrase| {
          state = parser.parse(phrase.list)
          state.end_idx || raise("No known meaning for sequence phrase: "phrase.inspect"")
          result = state.result[:root]
          handlers.__send__(result.first, output, result.last)
        }
        
        AST::Sequence.new(line: group.start.line, array: output)
      }
      
      const parser: Pegleromyces::Stream::Parser {
        const grammar: Pegleromyces::Grammar {
          const integer_pattern: Regexp.new("^[0-9]+$")
          
          s:            si([:tagged?, [:space], true])
          glyph: |text| si([:tagged?, [:glyph], true], [:text, [], text])
          integer_word: si([:tagged?, [:word],  true]
                           [:match?,  [integer_pattern], true])
          
          [rules]
          rule root: (
              r(none)    { [:none,    captures] }
            / r(integer) { [:integer, captures] }
          )[:root]
          
          rule none:    s+esi
          rule integer: s+ integer_word[:integer] +s+esi
        }
      }
      
      [handlers]
      
      none: {}
      
      integer: |output, integer:|
        output.push(ast.numeric(integer, integer.integer))
    }
    
  }
}
