
Amadou << {
  
  TokenGrammar: Pegleromyces::Grammar {
    C: Pegleromyces::Grammar {
      nl:     str("\n")
      spc:    set(" \t\r\f\v") / str("\\\n")
      spc_nl: spc / nl
      
      eof:    !any
      eol:    nl / eof
      
      # TODO: Unicode upper and lower
      upper:  range('A','Z')
      lower:  range('a','z')
      num:    range('0','9')
      alpha:  lower / upper / str('_')
      alnum:  alpha / num
    }
    
    var tokenizer: Token.method(:from)
    
    [rules]
    
    rule root: phrases[:root]
    
    rule phrases:
      r(phrase.*[:phrases] + phrase_no_delim[:last_phrase])
        { [*phrases, last_phrase] }
    
    rule phrase:
      r(phrase_pair.*[:pairs] + space[:space] + delim[:delim])
        { Amadou::Phrase.from([*pairs.flatten(1), space], delim) }
    
    rule phrase_no_delim:
      r(phrase_pair.*[:pairs] + space[:space])
        { Amadou::Phrase.from([*pairs.flatten(1), space]) }
    
    rule phrase_pair:
      r(space[:space] + phrase_term[:term])
        { [space, term] }
    
    rule phrase_term: group / string / word / glyph
    
    rule delim: set(",;\n").token(:delim)
    
    rule space:
      C.spc.*.token(:space)
    
    rule word:
      C.alnum.+.token([:term, :word])
    
    rule glyph:
      (!(
          set(",;\n") / C.spc / C.alnum
        / set("(){}[]") / set("\'\"") / str("@@@")
        ) + any).token([:term, :glyph])
    
    group_type: |start, finish|
      str(start).token(:start)[:start]
    + phrases[:phrases]
    + str(finish).token(:finish)[:finish]
    
    rule group: r(
      group_type('(', ')')
    / group_type('{', '}')
    / group_type('[', ']')
    ) { Amadou::Group.from(start, phrases, finish) }
    
    string_char: |finish| !set("\\" + finish) + any
    string_word: |finish|
      string_char(finish).*
    + (str("\\") + any + string_char(finish).*).*
    
    string_type: |start, finish|
      str(start).token(:start)[:start]
    + string_word(finish).token([:content])[:content]
    + str(finish).token(:finish)[:finish]
    
    rule string: r(
      string_type('"', '"')
    / string_type("'", "'")
    / string_type("@@@", "@@@") # TODO: remove
    ) { Amadou::String.from(start, content, finish) }
  }
  
}
