
Amadou << {
  
  Phrase < BasicObject {
    static from: |list, delim=null| new(list: list, delim: delim)
    var list: []
    var delim: null
    
    var tag_table:  Rubinius::LookupTable.new
    tags:           tag_table.keys
    tagged?: |t|    tag_table.key?(t) || :phrase == t
    tagged: |*tags| tags.each |t| { tag_table[t] = true }; self
    
    delim_eq?: |x| x.to_sym == delim.sym
    
    delim_match?: |pattern| !!pattern.match(delim.text)
    
    any_terms?: list.size > 1
    first_term: term_at(0)
    terms:      list.select |item| { item.tagged?(:term) }
    
    term_at:  |idx| list[idx * 2 + 1]
    space_at: |idx| list[idx * 2 + 1]
    
    term_count:  (list.size - 1) / 2
    space_count: (list.size + 1) / 2
    
    subphrase: |start, finish=null| {
      range = Ruby::Range.new(start * 2, (finish &? finish * 2 ?? -1))
      Phrase.from(list[range], delim)
    }
    
    representation: [:phrase,
      list.map(&:representation),
      delim.?representation ?? null,
    ]
  }
  
}
